# -*- coding: utf-8 -*-
"""Aula_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tQWEYVmCtmRcnwiNlxdBuyu6BMMq9Ntc

# **Tipos básicos de variáveis**
"""



objeto_texto = "Eu sou um objeto do tipo texto"

objeto_texto

pi = 3

pi_quebrado = 3.14567

pi_quebrado

pi_quebrado+1

# Commented out IPython magic to ensure Python compatibility.
# %whos

variavel_nova = 123

variavel_nova*2

objeto_texto.upper()

objeto_texto.lower()

outro_texto = "e Ai BlZ?"

outro_texto.capitalize()

objeto_texto.upper()

objeto_texto.title()



help(objeto_texto.split)

objeto_texto.split(" ", 2)

objeto_texto

# Exercício

# 1. Crie uma variável textual (deve aparecer o tipo "str" no "%whos") que tenha o seu nome completo.
# Procure e utilize um método de objetos textuais (no caso vai estar disponível no objeto que vc criou)
# para contar o número de letras "o" no seu nome

# 2. [DESAFIO] Digamos que você tenha encontrado uma string que é um CPF com pontos e traços. Você
# consegue imaginar ou eventualmente implementar um comando em Python que remova esses pontos e traços?

# Jeito 1

seu_nome = "Obi Wan Kenobi"

seu_nome.count("o")

seu_nome_em_minuscula = seu_nome.lower()

seu_nome_em_minuscula.count("o")

seu_nome.lower().count("o")

# Jeito 2

seu_nome.count("o") + seu_nome.count("O")

cpf_exemplo = "123.456.789-0"

cpf_sem_ponto = cpf_exemplo.replace(".", "")

cpf_sem_ponto_e_sem_traco = cpf_sem_ponto.replace("-", "")

# method chaining (ou encadeamento de métodos)

# sao iguais

cpf2 = cpf_exemplo.replace(".", "").replace("-", "")
#opcao 1

cpf2 = (cpf_exemplo.
          replace(".", "").
          replace("-", ""))
# opcao 2

# observacao importante! sem os parenteses mais externos não funcionaria...

#cpf_exemplo.
#          replace(".", "").
#          replace("-", "")
# erro!!!

"""# Objetos numéricos"""

numero_quebrado = 1.31

numero_quebrado+1

numero_quebrado-1

numero_quebrado*2

numero_quebrado/2

numero_quebrado^2
# não funciona!

numero_quebrado**2

inteiro = 2

inteiro^2

juro_anual = (1+0.01)**12-1

juro_anual

"a" + "b"

a = 2
b = 3
c = 5

# a * x **2 + b * x + c = 0

delta = (b ** 2 - 4 * a * c)**(1/2)

delta

type(delta)

type(c)

type(cpf_exemplo)

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""Vimos:

objetos do tipo texto
objetos numéricos (vários)

sabemos que objetos tem métodos, que dependem dos seu tipos. Todo STR vai ter os mesmos métodos, assim como todos os ints e tal.

Uma pergunta natural que pode vir aqui é, como eu represento "conjuntos" de coisas (objetos, variáveis etc)?

# O tipo mais "básico" de conjunto de coisas é a lista
"""

minha_lista = [1, 2, 3]

outra_lista = ["a", 2, 3]

outra_lista

# isso tudo é equivalente a fazer

# minha_lista <- list(1, 2, 3)
# outra_lista <- list("a", 2, 3)

outra_lista + minha_lista

mais_uma_lista = [1, 2]

outra_lista + mais_uma_lista

minha_lista

# dados.filter(["coluna1", "coluna2", "coluna3"])

minha_lista[-2]

type(minha_lista)

minha_lista = [1,2,3]

minha_lista

minha_lista.count(5)

minha_lista.append(5)

minha_lista

minha_lista.reverse()

minha_lista

help(minha_lista.reverse)

ultima_lista = [1,2,3]